exports.handler = async function (event, context) {
    // CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS, GET',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Content-Type': 'application/json'
    };

    // Handle OPTIONS preflight request
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ body
        if (!event.body) {
            throw new Error("Request body is missing");
        }

        const request = JSON.parse(event.body);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!request.city || !request.weatherData || !request.weatherData.temperature || !request.character) {
            throw new Error("Missing required fields: city, weatherData.temperature, character");
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yandex GPT
        const response = await generateGPTResponse(request);
        
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
                success: true,
                phrase: response
            })
        };
        
    } catch (error) {
        console.error("Error:", error.message);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                success: false,
                error: error.message
            })
        };
    }
};

async function generateGPTResponse(request) {
    const { city, weatherData, character } = request;
    const { temperature, description, wind, humidity } = weatherData;

    // –ü—Ä–æ–º—Ç –¥–ª—è Yandex GPT
    const prompt = `
–¢—ã –∑–ª–æ–π –≤–æ–ª–∫.  –û–ø–∏—à–∏ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ ${city} –∫–∞–∫ —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂.
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C, —É—Å–ª–æ–≤–∏—è: ${description}.
–í–µ—Ç–µ—Ä: ${wind} –∫–º/—á, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%.
–ï—Å–ª–∏ –∏–º—è —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ "–≤–æ–ª–∫" —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä—ã—á–∞—Ç—å, –∑–ª–∏—Ç—å—Å—è –Ω–∞ –ø–æ–≥–æ–¥—É –∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –æ—Ç 150 –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤.
–ù–µ –∑–∞–±—É–¥—å —É–ø–æ–º—è–Ω—É—Ç—å —Å–≤–æ—é –≤–æ–ª—á—å—é –ø–æ–ø–∫—É –∏ —á—Ç–æ —Å –Ω–µ–π –±—É–¥–µ—Ç –≤ —ç—Ç—É –ø–æ–≥–æ–¥—É. –¢–∞–∫ –∂–µ —Ç—ã —Ä–∞–∑–≤—Ä–∞—Ç–Ω–∏–∫. 
–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–µ –∑–∞–±—ã—Ç—å —É–ø–æ–º—è–Ω—É—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Ç–æ—á–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –Ω–µ–º.
`;

    try {
        // –í—ã–∑–æ–≤ Yandex GPT API
        return await callYandexGPT(prompt);
    } catch (error) {
        console.error("GPT Error:", error);
        // –§–æ–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ GPT
        return generateFallbackResponse(character, city, temperature, description);
    }
}

async function callYandexGPT(prompt) {
    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏ folder ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiKey = process.env.YANDEX_API_KEY;
    const folderId = process.env.FOLDER_ID;
    
    if (!apiKey || !folderId) {
        throw new Error('Yandex GPT credentials not configured');
    }

    const response = await fetch('https://llm.api.cloud.yandex.net/foundationModels/v1/completion', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Api-Key ${apiKey}`,
            'x-folder-id': folderId
        },
        body: JSON.stringify({
            modelUri: `gpt://${folderId}/yandexgpt-lite`,
            completionOptions: {
                stream: false,
                temperature: 0.8,  // –ù–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—Å–∏–º –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                maxTokens: 100
            },
            messages: [
                {
                    role: "user",
                    text: prompt
                }
            ]
        })
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Yandex GPT error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    
    if (!data.result || !data.result.alternatives || !data.result.alternatives[0]) {
        throw new Error('Invalid response format from Yandex GPT');
    }
    
    return data.result.alternatives[0].message.text;
}

function getCharacterName(characterType) {
    const characters = {
        'fox': '–ª–∏—Å',
        'wolf': '–≤–æ–ª–∫', 
        'cat': '–∫–æ—Ç'
    };
    return characters[characterType] || '–ø–µ—Ä—Å–æ–Ω–∞–∂';
}


function generateFallbackResponse(character, city, temperature, description) {
    const responses = {
        wolf: `üê∫ –í ${city} ${temperature}¬∞C, ${description}!`,
    };
    
    return responses[character] || responses.fox;
}