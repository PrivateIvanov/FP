// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
  WEATHER: {
    API_KEY: "6a157a16aea74e6ea31140124251008",
    URL: "https://api.weatherapi.com/v1/current.json"
  }
};

// URL –≤–∞—à–µ–≥–æ API Gateway
const API_GATEWAY_URL = 'https://d5d4l3sqabqcaoirvus4.kf69zffa.apigw.yandexcloud.net/generate-phrase';



// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
  screens: {
    character: document.getElementById('characterScreen'),
    weather: document.getElementById('weatherScreen')
  },
  character: {
    images: document.querySelectorAll('.characterImg'),
    selectedImg: document.getElementById('selectedCharacterImg'),
    name: document.getElementById('weatherPhrase')
  },
  weather: {
    input: document.getElementById('cityInput'),
    button: document.getElementById('getWeatherBtn'),
    backButton: document.getElementById('backButton'),
    city: document.getElementById('cityName'),
    temp: document.getElementById('temperature'),
    icon: document.getElementById('weatherIcon'),
    desc: document.getElementById('weatherDescription'),
    wind: document.getElementById('wind'),
    humidity: document.getElementById('humidity')
  }
};


// // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// document.addEventListener('DOMContentLoaded', () => {
//   setupEventListeners();
// });

// –¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
const currentCharacter = {
  type: 'wolf',
  name: '–í–æ–ª–∫',
  img: 'img/Character1.jpg'
};




  // –ö–Ω–æ–ø–∫–∏
  elements.weather.backButton.addEventListener('click', goToMainPage);
  elements.weather.button.addEventListener('click', getWeather);
  elements.weather.input.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') getWeather();
  });





// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
async function getWeather() {
  const city = elements.weather.input.value.trim();
  if (!city) return;

  try {
    showLoading(true);
    
    // 1. –ó–∞–ø—Ä–æ—Å –∫ WeatherAPI
    const weatherData = await fetchWeather(city);
    updateWeatherUI(weatherData);
    
    // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ API Gateway
    const gptResponse = await generateCharacterResponse(weatherData);
    elements.character.name.textContent = gptResponse;

  } catch (error) {
    elements.character.name.textContent = `üòø –í–æ–ª–∫ –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É: ${error.message}`;
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    showLoading(false);
  }
}

// –ó–∞–ø—Ä–æ—Å –∫ WeatherAPI
async function fetchWeather(city) {
  const response = await fetch(
    `${API_CONFIG.WEATHER.URL}?key=${API_CONFIG.WEATHER.API_KEY}&q=${city}&lang=ru`
  );
  
  if (!response.ok) throw new Error("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
  const data = await response.json();
  
  return {
    city: data.location.name,
    temp: data.current.temp_c,
    condition: data.current.condition.text,
    wind: data.current.wind_kph,
    humidity: data.current.humidity,
    icon: data.current.condition.icon.replace("64x64", "128x128")
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ API Gateway
async function generateCharacterResponse(weather) {
  try {
    const response = await fetch(API_GATEWAY_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        city: weather.city,
        weatherData: {
          temperature: weather.temp,
          description: weather.condition,
          wind: weather.wind,
          humidity: weather.humidity
        },
        character: currentCharacter.type
      })
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.success) {
      return data.phrase;
    } else {
      throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ GPT:', error);
    // –§–æ–ª–±—ç–∫ –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ GPT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    return generateFallbackResponse(weather);
  }
}

// –§–æ–ª–±—ç–∫ –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
function generateFallbackResponse(weather) {
  const responses = {
    fox: `ü¶ä –õ–∏—Å—å–µ —É—à–∫–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç: –≤ ${weather.city} —Å–µ–π—á–∞—Å ${weather.temp}¬∞C –∏ ${weather.condition.toLowerCase()}! –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä—ã–∂–µ–π —à—É–±–∫–∏!`,
    wolf: `üê∫ –í–æ–ª—á–∏–π –≤–æ–π —Å–æ–æ–±—â–∞–µ—Ç: –≤ ${weather.city} ${weather.temp}¬∞C, ${weather.condition.toLowerCase()}! –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –æ—Ö–æ—Ç—ã!`,
    cat: `üê± –ö–æ—Ç–∏–∫ –º—É—Ä–ª—ã—á–µ—Ç: –≤ ${weather.city} —Ç–µ–ø–ª–æ - ${weather.temp}¬∞C –∏ ${weather.condition.toLowerCase()}! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–Ω–∞!`
  };
  
  return responses[currentCharacter.type] || `–í ${weather.city} —Å–µ–π—á–∞—Å ${weather.temp}¬∞C –∏ ${weather.condition.toLowerCase()}!`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateWeatherUI(weather) {
  elements.weather.city.textContent = weather.city;
  elements.weather.temp.textContent = `${weather.temp}¬∞C`;
  elements.weather.icon.src = `https:${weather.icon}`;
  elements.weather.desc.textContent = weather.condition;
  elements.weather.wind.textContent = `–í–µ—Ç–µ—Ä: ${weather.wind} –∫–º/—á`;
  elements.weather.humidity.textContent = `–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weather.humidity}%`;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading(isLoading) {
  elements.weather.button.disabled = isLoading;
  elements.weather.button.textContent = isLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É";
}

// –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
function goToMainPage() {
window.location.href = 'index.html';
}